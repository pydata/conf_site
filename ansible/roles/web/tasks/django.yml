- name: pull repository from Github to project directory
  git: accept_hostkey=yes
       dest={{ project_root }}
       repo=https://github.com/pydata/conf_site.git
       update=yes
       version={{ git_version }}
  become: true
  when: environment_type != "development"
  notify:
    - restart nginx
    - restart gunicorn
    - create new Sentry release
    - send Sentry notification of deployment

- name: install python packages and associated libraries
  apt:
    name:
      - python3-dev
      - python3-pip
      - python3-virtualenv
      - libffi-dev
      - libimagequant-dev
      - libjpeg-dev
      - libssl-dev
      - libtiff-dev
      - libxml2
      - libxml2-dev
      - libxslt-dev
      - libxslt1-dev
      - zlib1g-dev
    state: present
  become: true
  notify: restart gunicorn

- name: change ownership of everything to this user
  file:
    path: "{{ project_root }}"
    recurse: true
    owner: "{{ ansible_user_id }}"
    group: www-data
  become: true

- name: manually figure out latest Git commit
  command: git rev-parse HEAD chdir={{ project_root }}
  register: git_status
  tags:
    - skip_ansible_lint

- name: determine if virtualenv exists
  stat: path={{ virtualenv_root }}/{{ git_status.stdout }}
  register: venv_dir

- name: create virtualenv if necessary
  command: python3 -m virtualenv -p python3 {{ virtualenv_root }}/{{ git_status.stdout }}
  when: venv_dir.stat.isdir is not defined
  notify: delete other virtualenvs
  tags:
    - skip_ansible_lint

- name: add/update "previous" virtualenv symlink
  shell: >
    ln -sfn
    $(readlink {{ virtualenv_root }}/current)
    {{ virtualenv_root }}/previous
  args:
    warn: false
  when: venv_dir.stat.isdir is not defined
  ignore_errors: true

- name: add/update "current" virtualenv symlink
  file:
    state: link
    path: "{{ virtualenv_root }}/current"
    src: "{{ virtualenv_root }}/{{ git_status.stdout }}"

- name: use symlink for easier virtualenv management
  file: state=link
        path={{ virtualenv_root }}/current
        src={{ virtualenv_root }}/{{ git_status.stdout }}

- name: install latest version of pip
  pip:
    extra_args: "--upgrade"
    name: pip
    state: present
    virtualenv: "{{ virtualenv_root }}/current"

- name: update virtualenv with requirements
  pip:
    extra_args: "--upgrade"
    requirements: "{{ project_root }}/requirements/{{ environment_type }}.txt"
    state: present
    virtualenv: "{{ virtualenv_root }}/current"
  notify: restart gunicorn

- name: add supervisor configuration file for gunicorn
  template: src=supervisor.conf
            dest=/etc/supervisor/conf.d/gunicorn.conf
            mode=0644
  become: true
  notify:
    - restart supervisor
    - restart gunicorn

- name: create sensitive settings file
  template: src=sensitive-settings.py
            dest={{ project_root }}/conf_site/settings/secrets.py
            mode=0644
  notify: restart gunicorn

- name: database migrate
  django_manage: command="migrate"
                 app_path={{ project_root }}
                 settings=conf_site.settings.{{ environment_type }}
                 virtualenv={{ virtualenv_root }}/current
  notify: restart gunicorn

- name: figure out whether fixtures have already been applied
  stat:
    path: "{{ project_root }}/fixtures/.applied"
  register: fixtures_applied
  tags:
    - fixtures
    - testing

# https://serverfault.com/a/616976/48777
- name: create list of fixture templates
  shell: |
    set -eo pipefail
    ls roles/web/templates/fixtures/* | sed 's~.*/~~g'
  args:
    executable: /bin/bash
  delegate_to: localhost
  register: fixture_templates
  when: not fixtures_applied.stat.exists
  tags:
    - fixtures
    - testing

- name: create fixtures from templates
  template:
    dest: "{{ project_root }}/fixtures/{{ item }}"
    src: "templates/fixtures/{{ item }}"
    mode: 0600
  with_items: "{{ fixture_templates.stdout.splitlines() }}"
  when: not fixtures_applied.stat.exists
  tags:
    - fixtures
    - testing

- name: validate fixtures
  shell: |
    python3 -m json.tool < {{ project_root }}/fixtures/{{ item }} > /dev/null
  with_items: "{{ fixture_templates.stdout.splitlines() }}"
  when: not fixtures_applied.stat.exists
  tags:
    - fixtures
    - testing

- name: load fixtures
  django_manage:
    app_path: "{{ project_root }}"
    command: loaddata
    fixtures: "{{ project_root }}/fixtures/{{ item }}"
    settings: "conf_site.settings.{{ environment_type }}"
    virtualenv: "{{ virtualenv_root }}/current"
  with_items: "{{ fixture_templates.stdout.splitlines() }}"
  when: not fixtures_applied.stat.exists
  notify: mark fixtures as applied
  tags:
    - fixtures

- name: collect static files
  django_manage: command="collectstatic --noinput --clear"
                 app_path={{ project_root }}
                 settings=conf_site.settings.{{ environment_type }}
                 virtualenv={{ virtualenv_root }}/current
  notify: restart nginx

- name: create reviewers user group
  django_manage: command=create_review_group
                 app_path={{ project_root }}
                 settings=conf_site.settings.{{ environment_type }}
                 virtualenv={{ virtualenv_root }}/current
  notify: restart gunicorn
