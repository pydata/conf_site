- name: pull repository from Github to project directory
  git: accept_hostkey=yes
       dest={{ project_root }}
       repo=https://github.com/pydata/conf_site.git
       update=yes
       version={{ git_version }}
  become: true
  when: environment_type != "development"
  notify:
    - restart nginx
    - restart gunicorn
    - create new Sentry release
    - send Sentry notification of deployment

- name: install python packages and associated libraries
  apt:
    name:
      - gettext
      - python3-dev
      - python3-pip
      - python3-virtualenv
      - libffi-dev
      - libjpeg-dev
      - libssl-dev
      - libtiff-dev
      - libxml2
      - libxml2-dev
      - libxslt-dev
      - libxslt1-dev
      - zlib1g-dev
    state: present
  become: true
  notify: restart gunicorn

- name: change ownership of everything to this user
  file:
    path: "{{ project_root }}"
    recurse: true
    owner: "{{ ansible_user_id }}"
    group: www-data
  become: true

- name: manually figure out latest Git commit
  command: git rev-parse HEAD chdir={{ project_root }}
  register: git_status
  tags:
    - skip_ansible_lint

- name: determine if virtualenv exists
  stat: path={{ virtualenv_root }}/{{ git_status.stdout }}
  register: venv_dir

- name: create virtualenv if necessary
  command: python3 -m virtualenv -p python3 {{ virtualenv_root }}/{{ git_status.stdout }}
  when: venv_dir.stat.isdir is not defined
  notify: delete other virtualenvs
  tags:
    - skip_ansible_lint

- name: add/update "previous" virtualenv symlink
  shell: >
    ln -sfn
    $(readlink {{ virtualenv_root }}/current)
    {{ virtualenv_root }}/previous
  args:
    warn: false
  when: venv_dir.stat.isdir is not defined
  ignore_errors: true

- name: add/update "current" virtualenv symlink
  file:
    state: link
    path: "{{ virtualenv_root }}/current"
    src: "{{ virtualenv_root }}/{{ git_status.stdout }}"

- name: use symlink for easier virtualenv management
  file: state=link
        path={{ virtualenv_root }}/current
        src={{ virtualenv_root }}/{{ git_status.stdout }}

- name: install latest version of pip
  pip:
    extra_args: "--upgrade"
    name: pip
    state: present
    virtualenv: "{{ virtualenv_root }}/current"

- name: update virtualenv with requirements
  pip:
    extra_args: "--upgrade"
    requirements: "{{ project_root }}/requirements/{{ environment_type }}.txt"
    state: present
    virtualenv: "{{ virtualenv_root }}/current"
  notify: restart gunicorn

- name: add supervisor configuration file for gunicorn
  template: src=supervisor.conf
            dest=/etc/supervisor/conf.d/gunicorn.conf
            mode=0644
  become: true
  notify:
    - restart supervisor
    - restart gunicorn

- name: create pretalx configuration directory if necessary
  ansible.builtin.file:
    owner: "{{ ansible_user_id }}"
    path: "/etc/pretalx"
    state: "directory"
  become: true

- name: add custom pretalx configuration file
  ansible.builtin.template:
    dest: "/etc/pretalx/pretalx.cfg"
    mode: 0644
    owner: "{{ ansible_user_id }}"
    src: "pretalx.cfg.j2"
  notify: restart gunicorn

- name: database migrate
  ansible.builtin.command:
    cmd: "{{ virtualenv_root }}/current/bin/python -m pretalx migrate"
  notify: restart gunicorn

- name: collect static files
  ansible.builtin.command:
    cmd: "{{ virtualenv_root }}/current/bin/python -m pretalx rebuild"
  notify: restart nginx
